#!/bin/bash

SERVER=https://api.tizen.org
GITHOME=~/devel/tizen3/git
PROJECT=Tizen:Common

COLORIZE=0

PARALLEL_JOBS=16

function parallel_jobs {
	local max_number=$((0 + ${1:-0}))
	while true; do
		jobs &>/dev/null
		if [[ $(jobs -p | wc -l) -lt $max_number ]]; then
			break
		fi
		sleep 0.3
	done
}

function usage() {
	echo "Usage: $0 profile1 [profile2 ...]"
	exit 1
}

function color {
	for k in $*; do
		case $k in
			bold) tput bold 2>/dev/null;;
			none) tput sgr0 2>/dev/null;;
			*) tput setaf $k 2>/dev/null;;
		esac
	done
}

RED=$(color bold 1)
GREEN=$(color bold 2)
YELLOW=$(color bold 3)
BLUE=$(color bold 4)
COLOR_NONE=$(color none)

function tzfind() {
	paths=$(ls -d $GITHOME/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/*/*/$1/.git 2>/dev/null)
	if [[ -z "$paths" ]]; then
		echo "Git tree not found" >&2
		return 1
	fi

	if [[ $(echo $paths | wc -w) -gt 1 ]]; then
		echo "Path is not unique: $paths" >&2
		return 2
	fi

	echo $(dirname $paths) 
}

function get_profile_revision() {
	branch="accepted/tizen_$1"
	rev=$(git rev-parse --verify origin/$branch 2>/dev/null)
	echo $rev
}

function common_check() {
	repo=$1
	shift

	localdir=$(tzfind $repo)
	
	if ! pushd $localdir &>/dev/null ; then
		printf "%-50s GIT_NOT_FOUND\n" $repo
		return 1
	fi

#	git fetch -p origin +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/* &>/dev/null

	result=$(printf "%-50s" $repo)
	common_rev=$(get_profile_revision common)

	col=""
	for profile in $@; do
		rev=$(get_profile_revision $profile)

		if [[ -z "$rev" ]]; then
			col=${BLUE}
			res="NONE"
		elif [[ "$common_rev" == "$rev" ]]; then
			col=${GREEN}
			res="SYNC"
		elif git merge-base --is-ancestor $common_rev $rev; then
			# common is anscestor of profile commit => not synced
			col=${RED}
			res="NOT_SYNCED"
		else
			col=${YELLOW}
			res="FROZEN"
		fi

		if [[ "$COLORIZE" == 1 ]]; then
			result="$result ${col}${res}${COLOR_NONE}"
		else
			result="$result $res"
		fi
	done

	popd &>/dev/null

	echo $result
}

function get_pkg_infos() {
	local srv=$1
	local project=$2
	local pkgname=$3
	shift 3

	local tmpfile=$(mktemp)
	trap "rm -f $tmpfile" STOP INT QUIT EXIT
	
	osc -A $srv list -e $project $pkgname >$tmpfile 2>/dev/null
	[[ $? -ne 0 ]] && return 1
	
	specfile=$(egrep "\.spec$" $tmpfile | head -1)
	[[ -z "$specfile" ]] && return 2

	# find spec file name
	osc -A $srv cat -e $project $pkgname $specfile >$tmpfile
	repo=$(grep VCS: $tmpfile | awk '{print $2;}' | cut -f1 -d'#')
	rev=$(grep VCS: $tmpfile | awk '{print $2;}' | cut -f2 -d'#')

	common_check $repo "$@"

	return 0
}

printf "%-50s" PACKAGE
for x in "$@"; do 
	if [[ "$x" == "-c" ]]; then
		COLORIZE=1
		continue
	fi
	echo -n "tizen_$x "; done
echo

for pkg in $(osc -A $SERVER ls $PROJECT); do
	parallel_jobs $PARALLEL_JOBS
	get_pkg_infos $SERVER $PROJECT $pkg "$@" &
done

parallel_jobs 1
