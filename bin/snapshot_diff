#!/bin/bash

# This script computes the differences between 2 and more tizen profiles.
# Run it with '-h' or '--help' to get usage guidelines
#
# Authors: 
#	Stéphane Desneux <sdx@kooltux.org>
#	José Bollo <jobol@nonadev.net>

set -e

# adjust base url for tizen snapshots if needed
URL_BASE_DEFAULT=http://download.tizen.org/snapshots/tizen
URL_BASE=$URL_BASE_DEFAULT

GITHOME=${GITHOME:-~/devel/tizen3/git}

XMLSTARLET=$(which xml || which xmlstarlet)
[[ -z "$XMLSTARLET" ]] && { echo "Please install package 'xmlstarlet' (or 'xml' on some distros)"; exit 1; }

export LANG=C # for sorting

# temp files
tmpfile1=$(mktemp /tmp/$(basename $0).XXXXXX)
tmpfile2=$(mktemp /tmp/$(basename $0).XXXXXX)
tmpfile3=$(mktemp /tmp/$(basename $0).XXXXXX)
tmpfile4=$(mktemp /tmp/$(basename $0).XXXXXX)
trap "rm -f $tmpfile1 $tmpfile2 $tmpfile3 $tmpfile4" STOP INT QUIT EXIT

function usage() {
	cat << EOF >&2
Usage: $(basename $0) [-g|--git] [-u <baseurl>] [project1 [-u <baseurl>] [project2]]

-g option: also make a git analysis (adjust GITHOME variable in the script)
-u option: allows to change the default base url for next projects
           default is: $URL_BASE_DEFAULT

Project format: name[/snapshotid]
Examples:
   - common
   - tv
   - mobile
   - wearable
   - common/latest
   - common/tizen-common_20150511.1
EOF
}

# handle help
[[ $1 =~ ^(-h|--help)$ ]] && { usage; exit 0; }

# set default projects to analyse
[[ $# == 0 ]] && set -- common/latest tv/latest
[[ $# == 1 ]] && set -- $1 tv/latest

###########################

# log function
function info() {
	echo "$@" >&2
}

# parse an argument and returns a formatted string with <project name>/<snapshot id>
function parse_argument() {
	arg=$1
	if [[ $arg =~ ^([[:alnum:].-]+)(/([^/\t ]*)(/([^\t ]*))?)?$ ]]; then
		project=${BASH_REMATCH[1]}
		id=${BASH_REMATCH[3]:-*}
		repopattern=${BASH_REMATCH[5]:-*}

		# id can be optional (empty)
		case $id in
			""|"*") id=latest ;;
			*) ;;
		esac

		# resolve id
		id=$(get_release $project/$id)
		[[ -z "$id" ]] && return 1

		echo $project/$id/$repopattern

		return 0
	fi
	usage
	return 1
}

# extracts snapshot id from build.xml file
function get_release() {
	# $1 == project/id
	local url_snapshot=$1

	info -n "Retrieving snapshot id for $url_snapshot... "
    local rev
    rev=$(curl --silent $URL_BASE/$url_snapshot/build.xml | $XMLSTARLET sel  -t -v "/build/id/text()" 2>/dev/null)
    [[ -z "$rev" ]] && { info "Invalid project at $URL_BASE/$url_snapshot"; return 1; }
	
	echo $rev
	info "found $rev"
}

# extracts the list of repos from build.xml
function get_repos() {
	# $1 == project/id/repo_pattern
	local url_snapshot=$(cut -f1-2 -d'/' <<<$1)
	local pattern=$(cut -f3 -d'/' <<<$1)

	info -n "Retrieving repositories list for $url_snapshot... "
	local repos
    repos=$(curl --silent $URL_BASE/$url_snapshot/build.xml | $XMLSTARLET sel  -t -v "/build/buildtargets/buildtarget/@name" 2>/dev/null | sed 's/\n/ /g')
	[[ -z "$repos" ]] && { info "Project $URL_BASE/$url_snapshot has no repos"; return 1; }

	local frepos=""
	for x in $repos; do
		[[ -z "${x##$pattern}" ]] && frepos="$frepos $x" || info "Skipping repo $x"
	done

	echo $frepos

	info "found $(wc -w <<<$frepos | awk '{print $1}') repos"
}

# merges all manifests in given snapshot and return a sorted list of <git path> <revision>
function get_pkg_list() {
	# $1 == project/id/repo_pattern
	local url_snapshot=$(cut -f1-2 -d'/' <<<$1)

	local snapshotid=$(cut -f2 -d'/' <<<$url_snapshot)
	local manifest_url

	repolist=$(get_repos $1)
	
	info -n "Retrieving packages list ..."
	for repo in $repolist; do 
		manifest_url=$url_snapshot/builddata/manifest/${snapshotid}_${repo}.xml
		curl --silent $URL_BASE/$manifest_url | xml sel -t -m '//project' -v  'concat(@name," ",@revision)' -n | awk '{printf("%s %s\n",$1,substr($2,1,7));}'
		info -n " $repo"
	done | sort -u
	info ""
}

########################

function color {
	for k in $*; do
		case $k in
			bold) tput bold 2>/dev/null;;
			none) tput sgr0 2>/dev/null;;
			*) tput setaf $k 2>/dev/null;;
		esac
	done
}

RED=$(color bold 1)
GREEN=$(color bold 2)
YELLOW=$(color bold 3)
BLUE=$(color bold 4)
MAGENTA=$(color bold 5)
COLOR_NONE=$(color none)

function tzfind() {
	paths=$(ls -d $GITHOME/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/*/$1/.git 2>/dev/null)
	[[ -z "$paths" ]] && paths=$(ls -d $GITHOME/*/*/*/*/$1/.git 2>/dev/null)
	if [[ -z "$paths" ]]; then
		echo "Git tree not found: $1" >&2
		return 0
	fi

	if [[ $(echo $paths | wc -w) -gt 1 ]]; then
		echo "Path is not unique: $paths" >&2
		return 0
	fi

	gitdir=$(dirname $paths)
	[[ -d "$gitdir" ]] && echo $gitdir
}

function git_find_anc() {
	# in current dir
	local rev=$1
	local ref_commit=$2

	# check that both commits exist
	git rev-list -n 1 $rev &>/dev/null && 
	git rev-list -n 1 $ref_commit &>/dev/null && 
	{ git merge-base $rev $ref_commit | cut -c1-7; return 0; }
	
	# try to fetch 
	git fetch -p origin +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/* &>/dev/null

	# retry 
	git rev-list -n 1 $rev &>/dev/null && 
	git rev-list -n 1 $ref_commit &>/dev/null && 
	{ git merge-base $rev $ref_commit | cut -c1-7; return 0; }

	echo "UNKNOWN"
	return 1
}

function git_analyze() {
	local group_submission_list=$1
	shift

	local projects="$@"
	local colorize=0
	[[ -t 1 ]] && colorize=1 # test if stdout is a terminal

	local groupsubdelete=
	while read line; do
		set -- $line
		repo=$1; shift
		ref_commit=$1; shift
		printf "%-60s%-8s" $repo $ref_commit

		localdir=$(tzfind $repo)
		if [[ -z "$localdir" ]]; then
			printf "%-60s" "$repo NOT_FOUND"
			for x in $@; do printf "  %-8s" $x; done; echo
			continue
		fi

		pushd $localdir &>/dev/null
#		git fetch -p origin +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/* &>/dev/null

			local groupsubrev=
			local groupsubcomment=
			local n=1 # skip first project, which is the reference
			for rev; do
				n=$((n + 1))
				project=$(awk "{print \$$n}" <<<$projects)

				if [[ "$ref_commit" == "-" ]]; then
					col=${BLUE}
					res="P:" # private
					if [[ -z "$groupsubrev" ]]; then
						groupsubrev=$rev
						groupsubcomment="# added from $project"
					elif [[ "$rev" != "$groupsubrev" ]]; then
						groupsubcomment="$groupsubcomment (or added $rev from $project)"
					fi
				elif [[ "$rev" == "-" ]]; then
					col=${BLUE}
					res="  "
					groupsubdelete="$groupsubdelete $repo"
				elif [[ "$rev" == "$ref_commit" ]]; then
					col=${GREEN}
					res="S:" # "synced"
				elif anc=$(git_find_anc $rev $ref_commit); then
					case $anc in
						$rev)
							col=${YELLOW}
							res="F:" # "frozen"
							;;
						$ref_commit)
							# ref_commit is ancestor of current commit => not synced
							col=${MAGENTA}
							res="N:" # "not synced", "newer"
							if [[ -z "$groupsubrev" ]]; then
								groupsubrev=$rev
								groupsubcomment="# updated from $project"
							elif [[ "$rev" != "$groupsubrev" ]]; then
								groupsubcomment="$groupsubcomment (or updated $rev from $project)"
							fi
							;;
						UNKNOWN)
							col=${RED}
							res="E:" # ERROR on git analysis
							;;
						*)
							col=${RED}
							res="D:" # "diverged"
							;;
					esac

				else
					col=${RED}
					res="U:" # "unrelated"
				fi

				[[ $colorize == 1 ]] && echo -n $col
				printf "%s%-8s" "$res" $rev
				[[ $colorize == 1 ]] && echo -n ${COLOR_NONE}
			done

			echo 

		popd &>/dev/null

		if [[ -n "$group_submission_list" && -n "$groupsubrev" ]]; then
			printf "%-50s %-8s %s\n" $repo $groupsubrev "$groupsubcomment" >>$group_submission_list
		fi
	done

	# remove duplicate lines if any
	[[ -f "$group_submission_list" ]] && { uniq < $group_submission_list >$tmpfile2; mv $tmpfile2 $group_submission_list; }

	if [[ -n "$group_submission_list" && -n "$groupsubdelete" ]]; then
		echo
		echo "# the following packages may be deleted if not present in all other projects" >>$group_submission_list

		for x in $groupsubdelete; do 
			echo $x
		done | sort -u | sed 's/^/# /g' >>$group_submission_list
	fi
}
			
#######################

make_git_analysis=0
group_submission_list=""
projects=""

e=3

echo "# command line: $0 $@" >$tmpfile4
echo >>$tmpfile4
echo "# differences between projects:" >>$tmpfile4

while [[ $# != 0 ]]; do
	case $1 in
		-g|--git) 
			make_git_analysis=1
			shift
			continue
			;;
		-G|--groupsubmit) 
			make_git_analysis=1
			group_submission_list=$2
			shift 2
			continue
			;;
		-u|--url)
			URL_BASE=${2:-$URL_BASE_DEFAULT}
			shift 2
			continue
			;;
		*)
			arg=$1
			shift
			;;
	esac

	project=$(parse_argument $arg)

	projects="$projects $project"
	
	echo "# - $project" >>$tmpfile4

	get_pkg_list $project >$tmpfile2

	# the join command can't handle more than 2 files.
	# So we substitute spaces by '|' so that the sed will replace the first '|' by a space but not 
	# the next ones: for the 'join' command, the line still has 2 fields: the git path and the concatenation of the previous git revisions
	# we also replace empty fields by '#<pos>' with <pos> being the position of the next field: this
	# is used in the awk call below to generate empty fields on output
	if [ -s $tmpfile1 ]; then
		sed 's/|/ /' $tmpfile1 |
			join -a 1 -a 2 -o "0 1.2 2.2" -e "#$e" - $tmpfile2 |
			tr ' ' '|' >$tmpfile3
		cp $tmpfile3 $tmpfile1 # for next step
		e="$((e + 1))"
	else
		tr ' ' '|' <$tmpfile2 >$tmpfile1
	fi

	# The final line stored in $tmpfile3 looks like (with 4 projects and only 2 with the given pkg):
	# profile/common/meta|5761ff1|4c5da9e|#4|#5
done

cat $tmpfile4
echo
if [[ $make_git_analysis == 1 ]]; then
cat <<EOF
# Legend:
# - S: synced
# - N: newer (error)
# - F: frozen (older)
# - U: unrelated
# - D: diverged
# - E: error in analysis (invalid commit ids)
# - P: private (== not present in ref project)

EOF
fi

printf "#%-60s" git_path
for x in $projects; do printf "%-10s" $(cut -f1 -d'/' <<<$x); done; echo

# the first awk call replaces '#<pos>' with empty fields (depending on position): it creates new fields if needed
# so we need a second call to 1) skip the lines which contain the same revisions and 2)format the final result 
tr '|' ' ' <$tmpfile3 |
awk 'function f(z){return z<=1 ? "-" : "- "f(z-1)} function max(a,b) {return a<b?b:a;} 
  {for(j=i=2;i<=NF;i++) { if($i ~ /^#/) { n=substr($i,2); $i=f(n-j); j+=max(1,n-j) } else j++;}}1' |
	awk '{ for(i=2;i<NF && $i == $(i+1);i++); if (i == NF) next; 
		 printf("%-60s",$1); for(i=2;i<=NF;i++) printf "%-10s",$i; printf("\n"); }' >$tmpfile1

if [[ $make_git_analysis == 1 ]]; then
	[[ -n "$group_submission_list" ]] && rm -f $group_submission_list
	cat $tmpfile1 | git_analyze "$group_submission_list" $projects
else 
	cat $tmpfile1
fi

info "$(wc -l $tmpfile1|awk '{print $1}') differences"
[[ -f $group_submission_list ]] && echo "Group submission generated in $group_submission_list."
